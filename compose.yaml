# NOT FOR PRODUCTION USE

services:
  unleash-postgres-db:
    image: postgres:17.0
    container_name: unleash-postgres-db
    hostname: unleash-postgres-db
    restart: unless-stopped
    volumes:
      - ./docker_data/unleash-postgres-db:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${UNLEASH__POSTGRES_DB:-unleash}
      POSTGRES_USER: ${UNLEASH__POSTGRES_USER:-root}
      POSTGRES_PASSWORD: ${UNLEASH__POSTGRES_PASSWORD:-password}
      TZ: ${TIMEZONE:-Pacific/Auckland}
    healthcheck:
      test:
        [
          "CMD",
          "pg_isready",
          "--username=${UNLEASH__POSTGRES_USER:-root}",
          "--host=127.0.0.1",
          "--port=5432",
          "-d${UNLEASH__POSTGRES_DB:-unleash}"
        ]
      interval: 20s
      timeout: 3m
      retries: 5
      start_period: 10s

  unleash-web:
    image: unleashorg/unleash-server:6.2
    container_name: unleash-web
    hostname: unleash-web
    restart: unless-stopped
    ports:
      - 4242:4242
    environment:
      TZ: ${TIMEZONE:-Pacific/Auckland}
      DATABASE_URL: "postgres://${UNLEASH__POSTGRES_USER:-root}:${UNLEASH__POSTGRES_PASSWORD:-password}@unleash-postgres-db/${UNLEASH__POSTGRES_DB:-unleash}"
      DATABASE_SSL: "false"
      LOG_LEVEL: "info"
    depends_on:
      unleash-postgres-db:
        condition: service_healthy
    command: [ "node", "index.js" ]
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:4242/health || exit 1
      interval: 20s
      timeout: 3s
      retries: 5
      start_period: 15s

  records-postgres-db:
    image: postgres:17.0
    container_name: records-postgres-db
    hostname: records-postgres-db
    restart: unless-stopped
    volumes:
      - ./docker_data/records-postgres-db:/var/lib/postgresql/data
    ports:
      - 5432:5432
    environment:
      POSTGRES_DB: ${RECORDS__POSTGRES_DB:-records}
      POSTGRES_USER: ${RECORDS__POSTGRES_USER:-root}
      POSTGRES_PASSWORD: ${RECORDS__POSTGRES_PASSWORD:-password}
      TZ: ${TIMEZONE:-Pacific/Auckland}
    healthcheck:
      test:
        [
          "CMD",
          "pg_isready",
          "--username=${RECORDS__POSTGRES_USER:-root}",
          "--host=127.0.0.1",
          "--port=5432",
          "-d${RECORDS__POSTGRES_DB:-records}"
        ]
      interval: 20s
      timeout: 3s
      retries: 5
      start_period: 10s

  records-valkey:
    image: valkey/valkey:8.0
    container_name: records-valkey
    hostname: records-valkey
    restart: unless-stopped
    ports:
      - 6379:6379
    environment:
      TZ: ${TIMEZONE:-Pacific/Auckland}
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      interval: 20s
      timeout: 3s
      retries: 5
      start_period: 10s
      
  grafana:
    image: grafana/grafana:11.5.2
    container_name: grafana
    restart: unless-stopped
    ports:
      - 3000:3000
    volumes:
      - ./container_configs/grafana_datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
#       - ./.docker_data/grafana:/var/lib/grafana
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true

  tempo:
    image: grafana/tempo:2.7.1
    container_name: tempo
    restart: unless-stopped
    command: [ "-config.file=/etc/tempo.yaml" ]
    ports:
      - 4317:4317
    volumes:
      - ./container_configs/tempo.yaml:/etc/tempo.yaml
#      - ./.docker_data/tempo:/var/tempo

  prometheus:
    image: prom/prometheus:v3.2.0
    container_name: prometheus
    restart: unless-stopped
    command:
      - --config.file=/etc/prometheus.yaml
      - --web.enable-remote-write-receiver
      - --enable-feature=exemplar-storage
      - --enable-feature=native-histograms
    ports:
      - 9090:9090
    volumes:
      - ./container_configs/prometheus.yaml:/etc/prometheus.yaml
#      - ./.docker_data/prometheus:/prometheus


  records-backend:
    build:
      context: src/backend/Records
      dockerfile: WebAPI/Dockerfile
      no_cache: true
    container_name: records-backend
    ports:
      - 8080:8080
      - 8081:8081
    environment:
      ASPNETCORE_HTTP_PORTS: "8080;8081"
      ASPNETCORE_ENVIRONMENT: Development
      RECORDS__POSTGRES_HOST: records-postgres-db
      RECORDS__POSTGRES_PORT: 5432
      RECORDS__POSTGRES_DB: ${RECORDS__POSTGRES_DB:-records}
      RECORDS__POSTGRES_USER: ${RECORDS__POSTGRES_USER:-root}
      RECORDS__POSTGRES_PASSWORD: ${RECORDS__POSTGRES_PASSWORD:-password}
      RECORDS__MIGRATE_DATABASE: "true"
      RECORDS__VALKEY_HOST: records-valkey
      RECORDS__VALKEY_PORT: 6379
      UNLEASH__API_URL: http://unleash-web:4242/api
      UNLEASH__API_KEY: default:production.30d020981e4026e09c4bb07039a58a4abc51a54cd1297e0554e9bffe
      UNLEASH__APP_NAME: records
      RECORDS__JWT_ECDSA_384_PRIVATE_KEY: "-----BEGIN EC PRIVATE KEY-----\nMIGkAgEBBDA7BMwW8Yz2zbTi9GJfyPZBKjiALmLjNmNZ+4ga/6AV3UqDV0aLnTum\nVqATSX9YfDWgBwYFK4EEACKhZANiAATLn8hZCaSub4Vl4f7L7Xc4I0haPz9vL8ue\no3vL6zEdmaOf8zRWY7wYXKcFMVwuAs6noLldgswOfoh9clQZTqXfJNYRPQ8KjPNs\nCULqAn3AdHSlMgteG8fa/408rZWKo+Y=\n-----END EC PRIVATE KEY-----\n"
      RECORDS__ENABLE_OPENTELEMETRY: "true"
      RECORDS__PROMETHEUS_SCRAPE_PORT: "8081"
      OTEL_EXPORTER_OTLP_ENDPOINT: "http://tempo:4317"
      
    depends_on:
      - records-postgres-db
      - records-valkey
      - tempo

  
