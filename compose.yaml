# Development compose file
networks:
  app-backend:
    driver: bridge

services:
  app:
    # image: ghcr.io/amieldelatorre/records-webapi:latest
    build:
      context: ./src/backend
      dockerfile: WebAPI/Dockerfile
    restart: unless-stopped
    container_name: app
    networks:
      - app-backend
    ports:
      - 8080:8080
    environment:
      APP__POSTGRES_DB: ${APP__POSTGRES_DB:?}
      APP__POSTGRES_USER: ${APP__POSTGRES_DB:?}
      APP__POSTGRES_PASSWORD: ${APP__POSTGRES_PASSWORD:?}
      APP__MIGRATE_DATABASE: ${APP__MIGRATE_DATABASE:?}
      APP__POSTGRES_HOST: ${APP__POSTGRES_HOST:?}
      APP__POSTGRES_PORT: ${APP__POSTGRES_PORT:?}
      APP__JWT_ECDSA_384_PRIVATE_KEY: ${APP__JWT_ECDSA_384_PRIVATE_KEY:?}
      OTEL_EXPORTER_OTLP_ENDPOINT: ${OTEL_EXPORTER_OTLP_ENDPOINT:?}
      OTEL_METRIC_EXPORT_INTERVAL: ${OTEL_METRIC_EXPORT_INTERVAL:?}
    healthcheck:
      test: "curl -fsSL localhost:8080/health"
      interval: 30s
      timeout: 5s
      retries: 3
    depends_on:
      app-db:
        condition: service_healthy
      app-db-pgbouncer:
        condition: service_healthy

  app-db:
    image: postgres:18.0
    restart: unless-stopped
    container_name: app-db
    command:
      - "postgres"
      - "-N1000" # max_connections
    networks:
      - app-backend
    volumes:
      - ./.docker_data/app-db:/var/lib/postgresql
    environment:
      POSTGRES_DB: ${APP__POSTGRES_DB:?}
      POSTGRES_USER: ${APP__POSTGRES_USER:?}
      POSTGRES_PASSWORD: ${APP__POSTGRES_PASSWORD:?}
      TZ: ${TIMEZONE:-Pacific/Auckland}
    security_opt:
      - "no-new-privileges:true"
    healthcheck:
      test:
        [
          "CMD",
          "pg_isready",
          "--username=${APP__POSTGRES_USER:?}",
          "--host=127.0.0.1",
          "--port=5432",
          "-d${APP__POSTGRES_DB:?}",
        ]
      interval: 30s
      timeout: 3s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: "0.50"
          memory: 512M

  app-db-pgbouncer:
    image: edoburu/pgbouncer:v1.24.1-p0
    restart: unless-stopped
    container_name: app-db-pgbouncer
    networks:
      - app-backend
    ports:
      - 5432:5432
    environment:
      DB_USER: ${APP__POSTGRES_USER:?}
      DB_PASSWORD: ${APP__POSTGRES_PASSWORD:?}
      DB_NAME: ${APP__POSTGRES_DB:?}
      DB_HOST: app-db
      POOL_MODE: transaction
      AUTH_TYPE: scram-sha-256
      MAX_CLIENT_CONN: 1000
      DEFAULT_POOL_SIZE: 800 # per user per database
      RESERVE_POOL_SIZE: 200 # spare for burst
    security_opt:
      - "no-new-privileges:true"
    healthcheck:
      test: ["CMD", "pg_isready", "-happ-db"]
      interval: 30s
      timeout: 3s
      retries: 5
      start_period: 10s
    depends_on:
      app-db:
        condition: service_healthy

  grafana:
    image: grafana/grafana:12.2.0
    restart: unless-stopped
    container_name: grafana
    networks:
      - app-backend
    ports:
      - 3000:3000
    volumes:
      - ./container_configs/grafana_datasources.yaml:/etc/grafana/provisioning/datasources/sources.yaml:ro
    environment:
      GF_AUTH_ANONYMOUS_ENABLED: "true"
      GF_AUTH_DISABLE_LOGIN_FORM: "true"
      GF_AUTH_ANONYMOUS_ORG_ROLE: "Admin"
    security_opt:
      - "no-new-privileges:true"

  tempo:
    image: grafana/tempo:2.8.2
    restart: unless-stopped
    container_name: tempo
    command: ["-config.file=/etc/tempo.yaml"]
    networks:
      - app-backend
    volumes:
      - ./container_configs/tempo.yaml:/etc/tempo.yaml:ro
    environment:
      TEMPO_HTTP_PORT: 3200
      TEMPO_LOG_LEVEL: info
      TEMPO_OTLP_GRPC_ENDPOINT: 0.0.0.0:4317
      TEMPO_STORAGE_BACKEND: local
      TEMPO_WAL_PATH: /var/tempo/wal
      TEMPO_BLOCKS_PATH: /var/tempo/blocks
    security_opt:
      - "no-new-privileges:true"

  prometheus:
    image: prom/prometheus:v3.6.0
    restart: unless-stopped
    container_name: prometheus
    command: ["--web.enable-remote-write-receiver"]
    networks:
      - app-backend
    ports:
      - 9090:9090
    volumes:
      - ./container_configs/prometheus.yml:/prometheus/prometheus.yml:ro
    security_opt:
      - "no-new-privileges:true"

  alloy:
    image: grafana/alloy:v1.11.0
    restart: unless-stopped
    container_name: alloy
    command:
      - "run"
      - "--storage.path=/var/lib/alloy/data"
      - "/etc/alloy/config.alloy"
    networks:
      - app-backend
    ports:
      - 4317:4317
    volumes:
      - ./container_configs/config.alloy:/etc/alloy/config.alloy:ro
    security_opt:
      - "no-new-privileges:true"
